// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  Id           String                 @id
  FullName     String?
  UserName     String
  Email        String                 @unique
  Password     String
  Image        String?                @db.LongText
  UserType     String
  About        String?                @db.LongText
  CreatedDate  DateTime
  WorkingPhone String?
  MobilePhone  String?
  Verified     Boolean
  Sessions     UserSession[]
  Tickets      Tickets[]
  TicketAgent  TicketAgent[]
  Article      KnowledgeBaseArticle[]
  Shift        ShiftAgent[]
  Reply        Reply[]
  Department   DepartmentAgent[]
}

model UserSession {
  Id        String   @id
  UserId    String
  Token     String
  TimeStamp DateTime @db.Timestamp()
  User      Users    @relation(fields: [UserId], references: [Id])

  @@index([UserId])
}

model Tickets {
  Id               String        @id
  UserId           String?
  Type             String
  ReportedVia      String
  Email            String
  Priority         String
  Subject          String        @db.LongText
  Content          String        @db.LongText
  Status           String
  Note             String?       @db.LongText
  DepartmentId     String?
  FirstResponseDue DateTime
  ResolutionDue    DateTime
  CreatedAt        DateTime
  UpdatedAt        DateTime?
  TicketAgent      TicketAgent[]
  Reply            Reply[]
  Attachement      Attachement[]
  Images           Images[]
  User             Users?        @relation(fields: [UserId], references: [Id])
  Department       Department?   @relation(fields: [DepartmentId], references: [Id])

  @@index([UserId])
  @@index([DepartmentId])
}

model TicketAgent {
  Id         String  @id
  TicketId   String
  AssignedTo String?
  Ticket     Tickets @relation(fields: [TicketId], references: [Id])
  Agent      Users?  @relation(fields: [AssignedTo], references: [Id])

  @@index([AssignedTo])
  @@index([TicketId])
}

model KnowledgeBaseCategory {
  Id           String                @id
  CategoryName String
  Description  String?
  Folder       KnowledgeBaseFolder[]
}

model KnowledgeBaseFolder {
  Id          String                 @id
  FolderName  String
  CategoryId  String
  Description String?                @db.LongText
  Category    KnowledgeBaseCategory  @relation(fields: [CategoryId], references: [Id])
  Article     KnowledgeBaseArticle[]
}

model KnowledgeBaseArticle {
  Id          String              @id
  Title       String              @db.Text
  Content     String              @db.LongText
  Publisher   String              @unique
  FolderId    String
  Description String?             @db.LongText
  CreatedAt   DateTime
  UpdatedAt   DateTime?
  View        Int?
  HelpFul     Int?
  NotHelpFul  Int?
  Suggested   Int?
  User        Users               @relation(fields: [Publisher], references: [Id])
  Folder      KnowledgeBaseFolder @relation(fields: [FolderId], references: [Id])
}

model Department {
  Id             String            @id
  DepartmentName String            @db.Text
  Description    String?           @db.LongText
  AgentId        String?
  DeptAgent      DepartmentAgent[]
  Tickets        Tickets[]
}

model DepartmentAgent {
  Id           String     @id
  AgentId      String
  DepartmentId String
  Dept         Department @relation(fields: [DepartmentId], references: [Id])
  Agent        Users      @relation(fields: [AgentId], references: [Id])
}

model Roles {
  Id             String            @id
  RoleType       String
  Description    String?           @db.LongText
  AgentType      String
  RolePermission Role_Permission[]
}

model Permission {
  Id              String            @id
  PermissionType  String
  Description     String?           @db.LongText
  Role_Permission Role_Permission[]
}

model Role_Permission {
  Id           String     @id
  RoleId       String
  PermissionId String
  Role         Roles      @relation(fields: [RoleId], references: [Id])
  Permission   Permission @relation(fields: [PermissionId], references: [Id])
}

model Shift {
  Id        String       @id
  ShiftName String
  WeekDay   Int
  StartTime DateTime
  EndTime   DateTime
  Shift     ShiftAgent[]
}

model ShiftAgent {
  Id      String @id
  ShiftId String
  AgentId String
  Shift   Shift  @relation(fields: [ShiftId], references: [Id])
  Agent   Users  @relation(fields: [AgentId], references: [Id])
}

model Attachement {
  Id               String          @id
  FileName         String          @db.LongText
  FilePath         String          @db.LongText
  Size             Decimal
  Mimi_Type        String          @db.LongText
  TicketId         String
  ReplyId          Int?
  CannedResponseId Int?
  Createdat        DateTime
  CreatedBy        String?
  Ticket           Tickets?        @relation(fields: [TicketId], references: [Id])
  Reply            Reply?          @relation(fields: [ReplyId], references: [Id])
  CannedResponse   CannedResponse? @relation(fields: [CannedResponseId], references: [Id])
}

model Images {
  Id               String          @id
  TicketId         String?
  ReplyId          Int?
  CannedResponseId Int?
  ImagePath        String
  ImageSize        Int
  MimiType         String?
  CannedResponse   CannedResponse? @relation(fields: [CannedResponseId], references: [Id])
  Ticket           Tickets?        @relation(fields: [TicketId], references: [Id])
  Reply            Reply?          @relation(fields: [ReplyId], references: [Id])
}

model Hi {
  Id   String @id
  name String
}

model Reply {
  Id          Int           @id
  AgentId     String
  TicketId    String
  Content     String        @db.LongText
  TimeStamp   DateTime      @db.Timestamp()
  Attachement Attachement[]
  Images      Images[]
  Ticket      Tickets       @relation(fields: [TicketId], references: [Id])
  Agent       Users         @relation(fields: [AgentId], references: [Id])
}

model CannedResponse {
  Id          Int                  @id
  AgentId     String
  Title       String               @db.Text
  Message     String               @db.LongText
  FolderId    Int
  createdAt   DateTime
  UpdatedAt   DateTime?
  Images      Images[]
  Attachement Attachement[]
  Folder      CannedResponseFolder @relation(fields: [FolderId], references: [Id])
}

model CannedResponseFolder {
  Id             Int              @id
  FolderName     String
  CannedResponse CannedResponse[]
}
